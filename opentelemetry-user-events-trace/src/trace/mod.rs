use exporter::UserEventsSpanExporter;
use opentelemetry::otel_warn;
use opentelemetry_sdk::trace::TracerProviderBuilder;
use reentrant_spanprocessor::ReentrantSpanProcessor;

mod exporter;
mod reentrant_spanprocessor;

/// Extension trait for adding a user event span exporter to the tracer provider builder.
pub trait UserEventsTracerProviderBuilderExt {
    /// Adds a user event span exporter to the tracer provider builder with the given provider name.
    ///
    /// The provider name must:
    /// - Be less than 234 characters.
    /// - Contain only ASCII letters, digits, and the underscore (`'_'`) character.
    /// - Be short, human-readable, and unique enough to avoid conflicts with other provider names.
    /// - Typically include a company name and a component name, e.g., "MyCompany_MyComponent".
    ///
    /// If an invalid provider name is provided, this method will not add the exporter to the builder.
    ///
    /// Tracepoint names are generated by combining the provider name, event
    /// level and keyword (currently hardcoded to `1`) in the following format:
    /// `ProviderName + '_' + 'L' + EventLevel + 'K' + EventKeyword`
    ///
    /// The EventLevel is always 4 (Informational) for Spans and the EventKeyword is always 1.
    /// For example, if "myprovider" is the provider name, the following tracepoint names are created:
    /// - `myprovider_L4K1`
    ///
    /// perf tool can be used to record events from the tracepoints.
    /// For example, the following will capture events from the tracepoint created above:
    /// perf record -e user_events:myprovider_L4K1
    fn with_user_event_exporter(self, provider_name: &str) -> Self;
}

impl UserEventsTracerProviderBuilderExt for TracerProviderBuilder {
    fn with_user_event_exporter(self, provider_name: &str) -> Self {
        match UserEventsSpanExporter::new(provider_name) {
            Ok(exporter) => {
                let reentrant_processor = ReentrantSpanProcessor::new(exporter);
                self.with_span_processor(reentrant_processor)
            }
            Err(e) => {
                otel_warn!(name: "User_Events.Exporter.CreationFailed", reason = &e);
                self
            }
        }
    }
}
