use exporter::UserEventsExporter;
use opentelemetry::otel_warn;
use opentelemetry_sdk::logs::LoggerProviderBuilder;
use reentrant_logprocessor::ReentrantLogProcessor;

mod exporter;
mod reentrant_logprocessor;

/// Extension trait for adding a user event exporter to the logger provider builder.
pub trait UserEventsLoggerProviderBuilderExt {
    /// Adds a user event exporter to the logger provider builder with the given provider name.
    ///
    /// The provider name must:
    /// - Be less than 234 characters.
    /// - Contain only ASCII letters, digits, and the underscore (`'_'`) character.
    /// - Be short, human-readable, and unique enough to avoid conflicts with other provider names.
    /// - Typically include a company name and a component name, e.g., "MyCompany_MyComponent".
    ///
    /// If an invalid provider name is provided, this method will not add the exporter to the builder.
    ///
    /// Tracepoint names are generated by combining the provider name, event
    /// level and keyword (currently hardcoded to `1`) in the following format:
    /// `ProviderName + '_' + 'L' + EventLevel + 'K' + EventKeyword`
    ///
    /// For example, if "myprovider" is the provider name, the following tracepoint names are created:
    /// - `myprovider_L5K1`
    /// - `myprovider_L4K1`
    /// - `myprovider_L3K1`
    /// - `myprovider_L2K1`
    /// - `myprovider_L1K1`
    ///
    /// perf tool can be used to record events from the tracepoints.
    /// For example the following will capture level 2 (Error) and 3(Warning) events:
    /// perf record -e user_events:myprovider_L2K1,user_events:myprovider_L3K1
    fn with_user_event_exporter(self, provider_name: &str) -> Self;
}

impl UserEventsLoggerProviderBuilderExt for LoggerProviderBuilder {
    fn with_user_event_exporter(self, provider_name: &str) -> Self {
        match UserEventsExporter::new(provider_name) {
            Ok(exporter) => {
                let reenterant_processor = ReentrantLogProcessor::new(exporter);
                self.with_log_processor(reenterant_processor)
            }
            Err(e) => {
                otel_warn!(name: "User_Events.Exporter.CreationFailed", reason = e);
                self
            }
        }
    }
}
